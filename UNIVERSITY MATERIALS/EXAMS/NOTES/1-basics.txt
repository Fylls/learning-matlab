everything is a amatrix

x = 5

comma not needed
v = [1,2,3];
v = [1 2 3];

suppress output;

matrix
A = [1,2; 3,4] ; separates bases

size(a)

dimensions of vectors

v= v' transpose


row vector     v = [1,2,3]
column vector  v = [1;2;3]

A(i,j) accessing a single component in a 2D matrix
A(1,2)
A(3,4)

accessing base in matrix
A(1,:) return all first row
A(:, 2) return all second column

A(:,:) all A

bigger matrix

A = [1 2 3 4 5 6 7 8 9];

: access ranges
submatrix

A(2:3, 2:3)

no 0 index

first ndex is 1

A(1,1) first element


w = 1:10 all the numbers from one to transpose
size w (10 x 1)

tensors, multi dimensional matrix
T = [A;A;A]



====================

matrices

A = 1 : 7
B = 8 : 10
C = 11: 13

A+B
A-B 
A*B matrix multipication (inner dimensions of AB have to match)
A/B 

1/3


A*B vector
A.*B each product

scalar product (dot)
X = [ 1 2 3 ]
Y = [ 4 5 6 ]

X * Y' = 32
dot(X,Y) //Inner product

cross product
cross(x,y)


sin
cos 
tan
exp
log
sqrt


pi, but if you assign another variable you can overwrite it
no variable e (exp(i))

sqrt(-1) = 0 + i

i*i = -1
i^2 = -1

sin(A) calculates the sin of every element and retrns a matrix of the same size

initializing matrixes

I identity matrix 1 on diagonal

3x3 identity matrix

inefficient:
I = [1,0,0:;
    0,1,0;
    0,0,1]

I = eye(3) 3x3 identity matrix

matrix of all zeros
zeros(3)
zeros(3,1)

all ones
ones(3)
ones(3,2)

define your own function

function



